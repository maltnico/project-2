const express = require('express');
const nodemailer = require('nodemailer');
const cors = require('cors');
require('dotenv').config();

const app = express();
const PORT = process.env.PORT || 3001;

console.log('üîÑ Initialisation du serveur email Easy Bail...');
console.log(`üîß PORT configur√©: ${PORT}`);

// Configuration GoCardless avec votre token sandbox
const GOCARDLESS_API_URL = 'https://api-sandbox.gocardless.com/api/v2';
const GOCARDLESS_SANDBOX_TOKEN = 'sandbox_75cv_6zICBha7ZwMxaLso0yDEp5cWcJILEMJmTcQ';
const GOCARDLESS_SECRET_ID = 'e0baa8f7-a8bb-451a-90fd-2c25eefe3e5b';
const GOCARDLESS_SECRET_KEY = '1abb091813e84e92becaee723ceb8198d3f45bce21b5b76ea8c9711b32a6a5a57939f8f4740bad30f09e2c1c43f36b76256dd9ca80c864bc9976c2c60958e067';
// Middleware
app.use(cors());
app.use(express.json());

// Test endpoint
app.get('/api/test', (req, res) => {
  console.log('üì° Test endpoint appel√©');
  res.json({ 
    message: 'Serveur email OVH Easy Bail op√©rationnel',
    timestamp: new Date().toISOString(),
    config: {
      port: PORT,
      nodeVersion: process.version
    }
  });
});

// GoCardless API Proxy Endpoints

// G√©n√©rer un token d'acc√®s (utilise le token sandbox)
app.post('/api/gocardless/token', async (req, res) => {
  try {
    console.log('üîê Retour du token sandbox GoCardless...');
    
    // Retourne directement le token sandbox
    const tokenData = {
      access: GOCARDLESS_SANDBOX_TOKEN,
      access_expires: 86400, // 24 heures
      refresh: null,
      refresh_expires: null
    };

    console.log('‚úÖ Token sandbox retourn√© avec succ√®s');
    res.json(tokenData);
  } catch (error) {
    console.error('‚ùå Erreur serveur g√©n√©ration token:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la g√©n√©ration du token',
      message: error.message
    });
  }
});

// R√©cup√©rer les institutions bancaires
app.get('/api/gocardless/institutions', async (req, res) => {
  try {
    const { country = 'FR' } = req.query;
    const authHeader = req.headers.authorization;
    
    if (!authHeader) {
      return res.status(401).json({ error: 'Token d\'autorisation manquant' });
    }

    console.log(`üè¶ R√©cup√©ration institutions pour ${country}...`);
    
    const response = await fetch(`${GOCARDLESS_API_URL}/institutions/?country=${country}`, {
      headers: {
        'Authorization': authHeader,
        'Accept': 'application/json'
      }
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Erreur r√©cup√©ration institutions:', data);
      return res.status(response.status).json({
        error: 'Erreur r√©cup√©ration institutions',
        details: data
      });
    }

    console.log(`‚úÖ ${Array.isArray(data) ? data.length : 0} institutions r√©cup√©r√©es`);
    res.json(data);
  } catch (error) {
    console.error('‚ùå Erreur serveur r√©cup√©ration institutions:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la r√©cup√©ration des institutions',
      message: error.message
    });
  }
});

// Cr√©er un end-user agreement
app.post('/api/gocardless/agreements', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    const { institution_id, max_historical_days = 90, access_valid_for_days = 90 } = req.body;
    
    if (!authHeader) {
      return res.status(401).json({ error: 'Token d\'autorisation manquant' });
    }

    console.log(`üìù Cr√©ation agreement pour institution ${institution_id}...`);
    
    const response = await fetch(`${GOCARDLESS_API_URL}/agreements/enduser/`, {
      method: 'POST',
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        institution_id,
        max_historical_days,
        access_valid_for_days,
        access_scope: ['balances', 'details', 'transactions']
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Erreur cr√©ation agreement:', data);
      return res.status(response.status).json({
        error: 'Erreur cr√©ation agreement',
        details: data
      });
    }

    console.log('‚úÖ Agreement cr√©√© avec succ√®s');
    res.json(data);
  } catch (error) {
    console.error('‚ùå Erreur serveur cr√©ation agreement:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la cr√©ation de l\'agreement',
      message: error.message
    });
  }
});

// Cr√©er une requisition
app.post('/api/gocardless/requisitions', async (req, res) => {
  try {
    const authHeader = req.headers.authorization;
    const { agreement, redirect = 'http://localhost:5173/banking/callback', institution_id, user_language = 'FR' } = req.body;
    
    if (!authHeader) {
      return res.status(401).json({ error: 'Token d\'autorisation manquant' });
    }

    console.log(`üîó Cr√©ation requisition pour agreement ${agreement}...`);
    
    const response = await fetch(`${GOCARDLESS_API_URL}/requisitions/`, {
      method: 'POST',
      headers: {
        'Authorization': authHeader,
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        redirect,
        institution_id,
        agreement,
        user_language
      }),
    });

    const data = await response.json();
    
    if (!response.ok) {
      console.error('‚ùå Erreur cr√©ation requisition:', data);
      return res.status(response.status).json({
        error: 'Erreur cr√©ation requisition',
        details: data
      });
    }

    console.log('‚úÖ Requisition cr√©√©e avec succ√®s');
    res.json(data);
  } catch (error) {
    console.error('‚ùå Erreur serveur cr√©ation requisition:', error);
    res.status(500).json({
      error: 'Erreur serveur lors de la cr√©ation de la requisition',
      message: error.message
    });
  }
});

// Endpoint principal pour l'envoi d'emails avec configuration dynamique
app.post('/api/send-email', async (req, res) => {
  try {
    const { config, emailOptions } = req.body;
    console.log('üìß Requ√™te d\'envoi d\'email re√ßue');

    // Validation des donn√©es requises
    if (!config || !emailOptions) {
      return res.status(400).json({
        success: false,
        error: "Configuration et options d'email requises"
      });
    }

    // Validation de la configuration SMTP
    if (!config.host || !config.port || !config.username || !config.password) {
      return res.status(400).json({
        success: false,
        error: "Configuration SMTP incompl√®te (host, port, username, password requis)"
      });
    }

    // Validation des options d'email
    if (!emailOptions.to || !emailOptions.subject || (!emailOptions.text && !emailOptions.html)) {
      return res.status(400).json({
        success: false,
        error: "Options d'email incompl√®tes (to, subject, et text ou html requis)"
      });
    }

    console.log(`üìß Envoi d'email via ${config.host}:${config.port}`);
    console.log(`üì§ De: ${emailOptions.from} ‚Üí √Ä: ${emailOptions.to}`);
    console.log(`üìù Sujet: ${emailOptions.subject}`);

    // Configuration du transporteur avec les param√®tres re√ßus
    const transporter = nodemailer.createTransporter({
      host: config.host,
      port: parseInt(config.port),
      secure: config.secure, // true pour 465, false pour autres ports
      auth: {
        user: config.username,
        pass: config.password,
      },
      // Options suppl√©mentaires pour OVH
      tls: {
        rejectUnauthorized: false
      }
    });

    // V√©rification de la connexion
    await transporter.verify();
    console.log('‚úÖ Connexion SMTP v√©rifi√©e');

    // Pr√©paration du message
    const mailOptions = {
      from: emailOptions.from,
      to: emailOptions.to,
      subject: emailOptions.subject,
      text: emailOptions.text,
      html: emailOptions.html,
      replyTo: emailOptions.replyTo
    };

    // Envoi de l'email
    const info = await transporter.sendMail(mailOptions);

    console.log('‚úÖ Email envoy√© avec succ√®s:', info.messageId);

    res.json({
      success: true,
      messageId: info.messageId,
      message: 'Email envoy√© avec succ√®s'
    });

  } catch (error) {
    console.error("‚ùå Erreur lors de l'envoi de l'email:", error.message);
    
    // Messages d'erreur sp√©cifiques pour OVH
    let errorMessage = error.message;
    if (error.code === 'EAUTH') {
      errorMessage = "Authentification SMTP √©chou√©e. V√©rifiez vos identifiants OVH.";
    } else if (error.code === 'ECONNREFUSED') {
      errorMessage = "Connexion refus√©e au serveur SMTP. V√©rifiez l'adresse et le port.";
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = "Timeout de connexion. V√©rifiez votre connexion internet et les param√®tres firewall.";
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
      code: error.code || 'UNKNOWN'
    });
  }
});

// Test SMTP avec configuration fournie
app.post('/api/test-smtp', async (req, res) => {
  try {
    const { config } = req.body;
    console.log('üîß Test de configuration SMTP demand√©');

    if (!config || !config.host || !config.port || !config.username || !config.password) {
      return res.status(400).json({
        success: false,
        error: 'Configuration SMTP incompl√®te'
      });
    }

    const transporter = nodemailer.createTransporter({
      host: config.host,
      port: parseInt(config.port),
      secure: config.secure,
      auth: {
        user: config.username,
        pass: config.password,
      },
      tls: {
        rejectUnauthorized: false
      }
    });

    await transporter.verify();
    console.log('‚úÖ Test SMTP r√©ussi');

    res.json({
      success: true,
      message: 'Connexion SMTP test√©e avec succ√®s'
    });

  } catch (error) {
    console.error('‚ùå Erreur test SMTP:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// D√©marrage du serveur
console.log('üîÑ Tentative de d√©marrage du serveur...');

const server = app.listen(PORT, () => {
  console.log(`üöÄ Serveur email Easy Bail d√©marr√© sur http://localhost:${PORT}`);
  console.log(`üìß Pr√™t pour l'envoi d'emails via configuration admin`);
  console.log(`üîß Mode: ${process.env.NODE_ENV || 'development'}`);
}).on('error', (err) => {
  console.error('‚ùå Erreur lors du d√©marrage du serveur:', err);
  if (err.code === 'EADDRINUSE') {
    console.error(`Port ${PORT} d√©j√† utilis√©. Essayez un autre port.`);
  }
  process.exit(1);
});

// Gestion propre de l'arr√™t
process.on('SIGINT', () => {
  console.log('\nüõë Arr√™t du serveur...');
  server.close(() => {
    console.log('‚úÖ Serveur arr√™t√© proprement');
    process.exit(0);
  });
});

module.exports = app;
